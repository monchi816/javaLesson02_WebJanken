/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2017-12-29 04:42:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.util.ArrayList;
import java.util.List;
import webJanken.*;

public final class jankenResult_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("webJanken");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"marketsystem-error.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!---->\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      webJanken.JankenHelper JankenHelper = null;
      synchronized (session) {
        JankenHelper = (webJanken.JankenHelper) _jspx_page_context.getAttribute("JankenHelper", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (JankenHelper == null){
          JankenHelper = new webJanken.JankenHelper();
          _jspx_page_context.setAttribute("JankenHelper", JankenHelper, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<meta name =\"company\" content =\"scheming\">\r\n");
      out.write("<title>じゃんけん(結果)</title>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("function check(chkform){\r\n");
      out.write("\ti = chkform.persons.value;\r\n");
      out.write("\tif(i<2){\r\n");
      out.write("\t\talert(\"じゃんけんは２人以上で行います。\");\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form method=\"post\" action=\"/WebJanken/FrontControllerServlet\" >\r\n");
      out.write("\r\n");
      out.write("\t");
JankenEntity jankenEntity = JankenHelper.getJankenResult(request);
      out.write("\r\n");
      out.write("\r\n");
      out.write("<h1><font size = \"10\" face = \"Century\">\"じゃんけんプログラム\"</font></h1>\r\n");
      out.write("<font size = \"5\" face = \"Arial\">言語：java、javascript、html</font><br/>\r\n");
      out.write("<font size = \"5\" face = \"Arial\">環境：jdk[1.8.0_25]、jre[1.8.0_25]、tomcat7</font><br/>\r\n");
      out.write("<font size = \"5\" face = \"Arial\">作成日：2015/4/5</font>\r\n");
      out.write("<hr>\r\n");
      out.write("\t<h2 align = \"center\">じゃんけん結果</h2><br/>\r\n");
      out.write("<form method=\"post\" action=\"/WebJanken/FrontControllerServlet\" onSubmit=\"return check(this)\">\r\n");
      out.write("\t<table border=\"1\" align = \"center\" width=\"10%\">\r\n");
      out.write("\t\t<tr bgcolor = \"powderblue\">\r\n");
      out.write("\t\t\t<td align=\"center\">対戦人数</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td align=\"center\"><input name=\"persons\" type=\"text\" value=\"");
      out.print(jankenEntity.getPlayers().size());
      out.write("\" style=\"text-align:center\"></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t<br/>\r\n");
      out.write("\t<br/>\r\n");
      out.write("\t<table border=\"1\" align = \"center\" width=\"20%\">\r\n");
      out.write("\t\t<tr bgcolor = \"powderblue\">\r\n");
      out.write("\t\t\t<td align=\"center\">選択した手</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t");
 for(int i = 0 ; i < jankenEntity.getPlayers().size() ; i++){ 
      out.write("\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t");
 Player player = (Player)jankenEntity.getPlayers().get(i); 
      out.write("\r\n");
      out.write("\t\t\t");
 int hand = ((Integer)jankenEntity.getHands().get(i)).intValue(); 
      out.write("\r\n");
      out.write("\t\t\t<td align=\"left\">");
      out.print(player.getName());
      out.write("'s hand is ");
      out.print(Player.valueOf(hand));
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t</table>\r\n");
      out.write("\t<br/>\r\n");
      out.write("\t<br/>\r\n");
      out.write("\t<table border=\"1\" align = \"center\" width=\"10%\">\r\n");
      out.write("\t\t<tr bgcolor = \"powderblue\">\r\n");
      out.write("\t\t\t<td align=\"center\">結果</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t");
 if(jankenEntity.getWinners().isEmpty()){ 
      out.write("\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td align=\"center\">drow !</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t");
 }else{ for(int i =0;i<jankenEntity.getWinners().size();i++){ 
      out.write("\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t");
 Player player = (Player)jankenEntity.getWinners().get(i);
      out.write("\r\n");
      out.write("\t\t\t<td align=\"center\">Winner is ");
      out.print(player.getName());
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t</table><br/><br/><br/>\r\n");
      out.write("\t<div align = \"center\">\r\n");
      out.write("\t<input type=\"submit\" name =\"rebattle\"  value=\"今の人数でもう一度勝負\" />\r\n");
      out.write("\t<input type = \"hidden\" name = \"flag\" value = \"2\">\r\n");
      out.write("\t</div>\r\n");
      out.write("</form>\r\n");
      out.write("\t<br/><br/>\r\n");
      out.write("\t<div align = \"center\">\r\n");
      out.write("\t<a href=\"/WebJanken?flag=1\">トップへ戻る</a>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
